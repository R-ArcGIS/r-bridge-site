{
  "hash": "4f48760fb3f4fd8079001370a7b35cf0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Overview\n---\n\n\nLayers represent represent a data service hosted by ArcGIS Online, ArcGIS Enterprise, Platform, or even an ArcGIS Hub site. Layers are how you will interact with your remotely hosted data. \n\nThe `{arcgis}` R metapackage is able to work with the most common types of data services: feature services and image servers. The types of layers that the R-ArcGIS Bridge does not yet support are vector and map tile services. \n\n\n# Types of services \n\nWhen working with these data services, each service type is assigned their own S3 class. \n\n\n| Class | Description |\n| ----- | ----------- |\n| `FeatureLayer` | Represents vector data. Can contain Point, MultiPoint, Polyline, or Polygon data | \n| `Table` | A type of FeatureLayer in which there is no geometry present. Represents tabular data. | \n| `ImageServer` | Provides access to raster imagery.  | \n| `FeatureServer` | A collection of FeatureLayer and Tables. | \n| `GroupLayer` | A collection of FeatureLayer and Tables. | \n| `MapServer` | A collection arbitrary data service types. | \n\n# Accessing data services\n\nThe R package `{arcgislayers}` provides access to services. Working with data services follows a pattern:\n\n- first, create a reference to a remote data service\n- query the data service and bring the results back into R\n\n## Creating data service objects\n\nUsing `{arcgislayers}`, the function `arc_open()` will create a reference to a service based on its url. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arcgis)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAttaching core arcgis packages:\n→ arcgisutils v0.3.0.9000\n→ arcgislayers v0.3.0.9000\n→ arcgisgeocode v0.2.0\n→ arcgisplaces v0.1.0\n```\n\n\n:::\n\n```{.r .cell-code}\n# feature service url\nfurl <- \"https://services3.arcgis.com/ZvidGQkLaDJxRSJ2/arcgis/rest/services/PLACES_LocalData_for_BetterHealth/FeatureServer/4\"\n\n# feature layer\nflayer <- arc_open(furl)\nflayer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<FeatureLayer>\nName: ZCTAs\nGeometry Type: esriGeometryPolygon\nCRS: 3785\nCapabilities: Query,Extract\n```\n\n\n:::\n:::\n\n\n## Querying feature services \n\nTo bring data from the service into memory in R, you must use `arc_select()`. \n\n\n:::{.callout-tip}\nAlways bring as little data as possible into memory. Utilize the `fields` and `where` arguments. \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\narc_select(\n  flayer,\n  where = \"TotalPopulation > 100000\",\n  fields = c(\"objectid\", \"totalpopulation\", \"zcta5\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 23 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -13584740 ymin: 3464366 xmax: -8218961 ymax: 5130153\nProjected CRS: WGS 84 / Pseudo-Mercator\nFirst 10 features:\n   OBJECTID TotalPopulation ZCTA5                       geometry\n1      2360          135256 08701 POLYGON ((-8266867 4879637,...\n2      2529          103660 10467 POLYGON ((-8225100 4995955,...\n3      2705          100330 11207 POLYGON ((-8228297 4966147,...\n4      2706          101958 11208 POLYGON ((-8225296 4965937,...\n5      2717          103447 11219 POLYGON ((-8239056 4957776,...\n6      2718          105797 11220 POLYGON ((-8241925 4958752,...\n7      2724          101727 11226 POLYGON ((-8234030 4960513,...\n8      2733          100687 11236 POLYGON ((-8228926 4961495,...\n9      2751          117110 11368 POLYGON ((-8223473 4976473,...\n10     2755          105712 11373 POLYGON ((-8225601 4975030,...\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}