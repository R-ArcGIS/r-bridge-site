[
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Packages",
    "section": "",
    "text": "For ArcGIS Pro users\n\nThe original R-ArcGIS Bridge package. arcgisbinding interacts with ArcGIS Pro to provide native reading and writing capabilities to local data sources as well as enables R based geoprocessing script tools."
  },
  {
    "objectID": "packages.html#arcgisbinding",
    "href": "packages.html#arcgisbinding",
    "title": "Packages",
    "section": "",
    "text": "For ArcGIS Pro users\n\nThe original R-ArcGIS Bridge package. arcgisbinding interacts with ArcGIS Pro to provide native reading and writing capabilities to local data sources as well as enables R based geoprocessing script tools."
  },
  {
    "objectID": "packages.html#arcgis",
    "href": "packages.html#arcgis",
    "title": "Packages",
    "section": "{arcgis}",
    "text": "{arcgis}\nFor analysts & data scientists\n\narcgis is a metapackage that loads all location services packages for you."
  },
  {
    "objectID": "packages.html#arcgislayers",
    "href": "packages.html#arcgislayers",
    "title": "Packages",
    "section": "{arcgislayers}",
    "text": "{arcgislayers}\nFor analysts & data scientists\n\nInterfaces with Feature Services and Image Servers. Enables you to read and write to services directly from R."
  },
  {
    "objectID": "packages.html#arcgisutils",
    "href": "packages.html#arcgisutils",
    "title": "Packages",
    "section": "{arcgisutils}",
    "text": "{arcgisutils}\nFor Package Developers\n\nA low-level package to handle authorization and conversion to and from Esri json formats."
  },
  {
    "objectID": "packages.html#arcpbf",
    "href": "packages.html#arcpbf",
    "title": "Packages",
    "section": "{arcpbf}",
    "text": "{arcpbf}\nFor Package Developers \n\nRead ArcGIS Protocol Buffer format (PBF) from R. Utilized in processing responses from REST API requests."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R-ArcGIS Bridge",
    "section": "",
    "text": "The R-ArcGIS Bridge is a project designed to integrate the power of R with the greater ArcGIS ecosystem.\nThe R-ArcGIS Bridge has capabilities to integrate with ArcGIS Pro and Location Services."
  },
  {
    "objectID": "index.html#integrate-with-arcgis-pro-arcgisbinding",
    "href": "index.html#integrate-with-arcgis-pro-arcgisbinding",
    "title": "R-ArcGIS Bridge",
    "section": "Integrate with ArcGIS Pro {arcgisbinding}",
    "text": "Integrate with ArcGIS Pro {arcgisbinding}\n{arcgisbinding} the first package created under the R-ArcGIS Bridge is designed bridge the powers of R and ArcGIS.\nUsing {arcgisbinding} you can read and write local data sources and take advantage of ArcGIS Pro’s projection engine.\n\nRead and write local data sources with arc.write() and arc.open()\nConvert to {sf} and {raster} objects with arc.data2sf() and arc.raster()\n\n\nGeoprocessing Tools written in R\nThe true power of {arcgisbinding} lies in it’s ability to generate geoprocessing tools that execute R code.\nRead the documentation to get started building R-based geoprocessing tools!"
  },
  {
    "objectID": "index.html#interact-with-location-services",
    "href": "index.html#interact-with-location-services",
    "title": "R-ArcGIS Bridge",
    "section": "Interact with Location Services",
    "text": "Interact with Location Services\nThe {arcgis} metapackage provides access to Esri location services enabling users to read and write data from their hosted or on prem Portals.\nFollow along with the introduction tutorial to get started interacting with your organziation’s data directly from R!"
  },
  {
    "objectID": "index.html#our-r-packages",
    "href": "index.html#our-r-packages",
    "title": "R-ArcGIS Bridge",
    "section": "Our R-packages",
    "text": "Our R-packages\n\n\n\n{arcgisbinding}\nHarness the power of ArcGIS Pro from R.\n\n\n{arcgis}\nLocation services metapackage. Your one stop shop for all your location services needs!\n\n\n\n\n{arcgislayers}\nRead and write to Feature Services and much more with ArcGIS Location Services.\n\n\n{arcgisutils}\nPowers {arcgis} by providing functionality to authorize with your portal and convert to and from R objects and Esri JSON.\n\n\n\n\n{arcpbf}\nProcess FeatureCollection protocol buffers in R using the power of Rust!"
  },
  {
    "objectID": "index.html#not-sure-where-to-start",
    "href": "index.html#not-sure-where-to-start",
    "title": "R-ArcGIS Bridge",
    "section": "Not sure where to start?",
    "text": "Not sure where to start?\n\nRead and write Feature Services using {arcgis}\nCreate R based Geoprocessing tools\nAccess your enterprise geodatabase from R"
  },
  {
    "objectID": "geoprocessing-tools.html",
    "href": "geoprocessing-tools.html",
    "title": "R Geoprocessing tools",
    "section": "",
    "text": "Much like a python geoprocessing (GP) script tool, R based script tools can be created allowing you to create GP tools and toolboxes that utilize the power of R. The basic anatomy of an R script GP tool is like so:\nThere must be a function defined named tool_exec(). This is what is going to be ran by ArcGIS Pro."
  },
  {
    "objectID": "geoprocessing-tools.html#input-and-output-parameters",
    "href": "geoprocessing-tools.html#input-and-output-parameters",
    "title": "R Geoprocessing tools",
    "section": "Input and Output Parameters",
    "text": "Input and Output Parameters\nAdditionally, there must be two arguments that correspond to input parameters and output parameters. The conventional name of these arguments are in_params and out_params. The first argument will always refer to the input parameters and the second to the outputs.\nin_params and out_params are named lists. The elements of these lists are determined by the direction of a parameter.\n\nIf the direction is Input it will be contained in in_params. Likewise, if the direction is Output, it will be contained in out_params."
  },
  {
    "objectID": "geoprocessing-tools.html#using-parameters",
    "href": "geoprocessing-tools.html#using-parameters",
    "title": "R Geoprocessing tools",
    "section": "Using parameters",
    "text": "Using parameters\nWe can extract values from the in_params and out_params lists by the name of the parameter.\n\n\n\n\n\n\nCaution\n\n\n\nThe name of the parameter must match that of the Name column in the Parameters option of the Tool Properties. It is not the Label column.\n\n\nFor example, if we wanted to parse the date parameter we could write our function like so:\ntool_exec &lt;- function(in_params, out_params) {\n  # fetch the date parameter\n  date_str &lt;- in_params[[\"date\"]]\n  \n  # parse it using {anytime}\n  clean_date &lt;- anytime::anytime(date_str)\n  \n  # ... do additional things\n}"
  },
  {
    "objectID": "geoprocessing-tools.html#parameter-types",
    "href": "geoprocessing-tools.html#parameter-types",
    "title": "R Geoprocessing tools",
    "section": "Parameter types",
    "text": "Parameter types\nThere are number of different type of parameters that can be provided to a geoprocessing (GP) tool. The type of parameter that is chosen determines how that parameter will appear in the GP pane’s UI. Each parameter type can be represented by a basic scalar R type: integer, double, character, logical, or NULL.\n\n\n\n\n\n\nTip\n\n\n\nA scalar value is a vector with only a single element.\n\n\nIt is incumbent upon you to take these parameter inputs and use them appropriately in R.\n\nData type mapping\n\n\n\n\n\n\nParameter Data Type\nR type\n\n\n\n\nString\ncharacter\n\n\nBoolean\nlogical\n\n\nDouble\nnumeric\n\n\nDate\ncharacter in the format of your system e.g. \"11/17/2023 4:35:57 PM\"\n\n\nField\ncharacter the field name of a feature class\n\n\nFolder\ncharacter absolute path e.g. \"C:\\\\Users\\username\\Documents\"\n\n\nFeature Class\ncharacterabsolute path e.g. \"C:\\\\Users\\username\\mydatabase.gdb\\\\feature_class\n\n\nSpatial Reference\ncharacter a string representation of the spatial reference e.g. \"PROJCS[\"....\"]\"\n\n\n\n\nMultiple Values\nWhen selecting the Multiple values check box in the parameter data type UI, users can then provide multiple inputs of that type.\n\nWhen this is done, each of the input values will be contained inside of a list. If you have multiple values ticked for the String type, you will get a list of scalar character vectors.\nThis is important so it bears repeating! When users provide multiple values they will be captured in R as a list of scalars. Meaning that if you have multiple String values you will not get a character vector with a length greater than one.\nTake the below input for example\n\nIn R we would get the list(\"string 1\", \"string 2\") and not c(\"string 1\", \"string 2\").\n\n\n\n\n\n\nTip\n\n\n\nTo turn a list of scalars of the same type—e.g. double, integer, logical, or character—into a vector you can use unlist(). For example unlist(list(\"string 1\", \"string 2\")) will give us c(\"string 1\", \"string 2\")."
  },
  {
    "objectID": "geoprocessing-tools.html#common-patterns",
    "href": "geoprocessing-tools.html#common-patterns",
    "title": "R Geoprocessing tools",
    "section": "Common Patterns",
    "text": "Common Patterns\n\nReading a Feature Class\nConverting it to an sf object\nWriting a Feature Class\nAutopopulate field drop-down using dependent parameter"
  },
  {
    "objectID": "geoprocessing-tools.html#dependent-parameters",
    "href": "geoprocessing-tools.html#dependent-parameters",
    "title": "R Geoprocessing tools",
    "section": "Dependent Parameters",
    "text": "Dependent Parameters\n\nAutopopulate field drop-down using dependent parameter"
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "R-ArcGIS Bridge",
    "section": "",
    "text": "{arcgisbinding} tutorial notebooks\nGeoprocessing tools using R scripts\n\n\n\n\n\nAuthorize to ArcGIS Online or an Enterprise Portal"
  },
  {
    "objectID": "tutorials.html#vignettes-tutorials",
    "href": "tutorials.html#vignettes-tutorials",
    "title": "R-ArcGIS Bridge",
    "section": "",
    "text": "{arcgisbinding} tutorial notebooks\nGeoprocessing tools using R scripts\n\n\n\n\n\nAuthorize to ArcGIS Online or an Enterprise Portal"
  },
  {
    "objectID": "tutorials.html#notes",
    "href": "tutorials.html#notes",
    "title": "R-ArcGIS Bridge",
    "section": "Notes",
    "text": "Notes\nTutorial/Workflow vs Vignette\nAnalogous to Python API\nVignette -&gt; Guide Tutorial -&gt; Sample\n\nTutorial would be a end to end process\n\nread in, manipulate, etc, then write back up to online\nHow to batch geocode and upload results to AGOL\nHow to create a GP tool (best practices)\nRead from an enterprise geodatabase / sde file\nusing R for something specific that you dont do in pro (for binding) or analysis tools\n\nVignette: how to understand / interact with a specific piece of code\n\nauthorization\ncreating new packages\n\ntips for developers"
  }
]