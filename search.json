[
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "R-ArcGIS Bridge",
    "section": "",
    "text": "{arcgisbinding} tutorial notebooks\nGeoprocessing tools using R scripts\n\n\n\n\n\nAuthorize to ArcGIS Online or an Enterprise Portal"
  },
  {
    "objectID": "tutorials.html#vignettes-tutorials",
    "href": "tutorials.html#vignettes-tutorials",
    "title": "R-ArcGIS Bridge",
    "section": "",
    "text": "{arcgisbinding} tutorial notebooks\nGeoprocessing tools using R scripts\n\n\n\n\n\nAuthorize to ArcGIS Online or an Enterprise Portal"
  },
  {
    "objectID": "tutorials.html#notes",
    "href": "tutorials.html#notes",
    "title": "R-ArcGIS Bridge",
    "section": "Notes",
    "text": "Notes\nTutorial/Workflow vs Vignette\nAnalogous to Python API\nVignette -&gt; Guide Tutorial -&gt; Sample\n\nTutorial would be a end to end process\n\nread in, manipulate, etc, then write back up to online\nHow to batch geocode and upload results to AGOL\nHow to create a GP tool (best practices)\nRead from an enterprise geodatabase / sde file\nusing R for something specific that you dont do in pro (for binding) or analysis tools\n\nVignette: how to understand / interact with a specific piece of code\n\nauthorization\ncreating new packages\n\ntips for developers"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Packages",
    "section": "",
    "text": "For ArcGIS Pro users\n\nThe original R-ArcGIS Bridge package. arcgisbinding interacts with ArcGIS Pro to provide native reading and writing capabilities to local data sources as well as enables R based geoprocessing script tools."
  },
  {
    "objectID": "packages.html#arcgisbinding",
    "href": "packages.html#arcgisbinding",
    "title": "Packages",
    "section": "",
    "text": "For ArcGIS Pro users\n\nThe original R-ArcGIS Bridge package. arcgisbinding interacts with ArcGIS Pro to provide native reading and writing capabilities to local data sources as well as enables R based geoprocessing script tools."
  },
  {
    "objectID": "packages.html#arcgis",
    "href": "packages.html#arcgis",
    "title": "Packages",
    "section": "{arcgis}",
    "text": "{arcgis}\nFor analysts & data scientists\n\narcgis is a metapackage that loads all location services packages for you."
  },
  {
    "objectID": "packages.html#arcgislayers",
    "href": "packages.html#arcgislayers",
    "title": "Packages",
    "section": "{arcgislayers}",
    "text": "{arcgislayers}\nFor analysts & data scientists\n\nInterfaces with Feature Services and Image Servers. Enables you to read and write to services directly from R."
  },
  {
    "objectID": "packages.html#arcgisutils",
    "href": "packages.html#arcgisutils",
    "title": "Packages",
    "section": "{arcgisutils}",
    "text": "{arcgisutils}\nFor Package Developers\n\nA low-level package to handle authorization and conversion to and from Esri json formats."
  },
  {
    "objectID": "packages.html#arcpbf",
    "href": "packages.html#arcpbf",
    "title": "Packages",
    "section": "{arcpbf}",
    "text": "{arcpbf}\nFor Package Developers \n\nRead ArcGIS Protocol Buffer format (PBF) from R. Utilized in processing responses from REST API requests."
  },
  {
    "objectID": "geoprocessing-tools.html",
    "href": "geoprocessing-tools.html",
    "title": "R Geoprocessing tools",
    "section": "",
    "text": "Much like a python geoprocessing (GP) script tool, R based script tools can be created allowing you to create GP tools and toolboxes that utilize the power of R. The basic anatomy of an R script GP tool is like so:\n\n\nmy-geoprocessing-tool.R\n\n1tool_exec &lt;- function(in_params, out_params) {\n  # ... do things here.. \n2  out_params\n}\n\n\n1\n\nTwo arguments capture input and output parameters\n\n2\n\nOutput parameters are returned to be captured by Pro\n\n\nGP R script tools are defined in a standalone R script. The GP tool is defined by a function called tool_exec(). tool_exec() take two and only two arguments capturing input and output parameters. tool_exec() should always return the output parameter argument."
  },
  {
    "objectID": "geoprocessing-tools.html#overview",
    "href": "geoprocessing-tools.html#overview",
    "title": "R Geoprocessing tools",
    "section": "",
    "text": "Much like a python geoprocessing (GP) script tool, R based script tools can be created allowing you to create GP tools and toolboxes that utilize the power of R. The basic anatomy of an R script GP tool is like so:\n\n\nmy-geoprocessing-tool.R\n\n1tool_exec &lt;- function(in_params, out_params) {\n  # ... do things here.. \n2  out_params\n}\n\n\n1\n\nTwo arguments capture input and output parameters\n\n2\n\nOutput parameters are returned to be captured by Pro\n\n\nGP R script tools are defined in a standalone R script. The GP tool is defined by a function called tool_exec(). tool_exec() take two and only two arguments capturing input and output parameters. tool_exec() should always return the output parameter argument."
  },
  {
    "objectID": "geoprocessing-tools.html#input-and-output-parameters",
    "href": "geoprocessing-tools.html#input-and-output-parameters",
    "title": "R Geoprocessing tools",
    "section": "Input and Output Parameters",
    "text": "Input and Output Parameters\nAdditionally, there must be two arguments that correspond to input parameters and output parameters. The conventional name of these arguments are in_params and out_params. The first argument will always refer to the input parameters and the second to the outputs.\nin_params and out_params are named lists. The elements of these lists are determined by the direction of a parameter.\n\nIf the direction is Input it will be contained in in_params. Likewise, if the direction is Output, it will be contained in out_params."
  },
  {
    "objectID": "geoprocessing-tools.html#using-parameters",
    "href": "geoprocessing-tools.html#using-parameters",
    "title": "R Geoprocessing tools",
    "section": "Using parameters",
    "text": "Using parameters\nWe can extract values from the in_params and out_params lists by the name of the parameter.\n\n\n\n\n\n\nCaution\n\n\n\nThe name of the parameter must match that of the Name column in the Parameters option of the Tool Properties. It is not the Label column.\n\n\nFor example, if we wanted to parse the date parameter we could write our function like so:\ntool_exec &lt;- function(in_params, out_params) {\n  # fetch the date parameter\n  date_str &lt;- in_params[[\"date\"]]\n  \n  # parse it using {anytime}\n  clean_date &lt;- anytime::anytime(date_str)\n  \n  # ... do additional things\n  \n  # return values to ArcGIS Pro\n  out_params\n}\n\nReturning values to ArcGIS Pro\nYou may have noticed that at the end of the tool_exec() function we are returning the out_params object. If we do not return the output parameters back to Pro—by returning out_params—the outputs cannot be captured and used by Pro.\nNotably, the output parameters are useful in linking one tool to another, for example via use in ModelBuilder or in an arcpy script.\nSee Using R script tools with arcpy\n\n\nParameter types\nThere are number of different type of parameters that can be provided to a geoprocessing (GP) tool. The type of parameter that is chosen determines how that parameter will appear in the GP pane’s UI. Each parameter type can be represented by a basic scalar R type: integer, double, character, logical, or NULL.\n\n\n\n\n\n\nTip\n\n\n\nA scalar value is a vector with only a single element.\n\n\nIt is incumbent upon you to take these parameter inputs and use them appropriately in R. Not every type of parameter can be processed correctly by arcgisbinding. Below are some of the most common parameter types and how they are handled by arcgisbinding. This is not a complete enumeration by any means!\n\nData type mapping\n\n\n\n\n\n\nParameter Data Type\nR type\n\n\n\n\nString\ncharacter\n\n\nBoolean\nlogical\n\n\nDouble\nnumeric\n\n\nDate\ncharacter in the format of your system e.g. \"11/17/2023 4:35:57 PM\"\n\n\nField\ncharacter the field name of a feature class\n\n\nFolder\ncharacter absolute path e.g. \"C:\\\\Users\\username\\Documents\"\n\n\nFeature Class\ncharacterabsolute path e.g. \"C:\\\\Users\\username\\mydatabase.gdb\\\\feature_class\n\n\nSpatial Reference\ncharacter a string representation of the spatial reference e.g. \"PROJCS[\"....\"]\"\n\n\n\n\n\nMultiple Values\nWhen selecting the Multiple values check box in the parameter data type UI, users can then provide multiple inputs of that type.\n\nWhen this is done, each of the input values will be contained inside of a list. If you have multiple values ticked for the String type, you will get a list of scalar character vectors.\nThis is important so it bears repeating! When users provide multiple values they will be captured in R as a list of scalars. Meaning that if you have multiple String values you will not get a character vector with a length greater than one.\nTake the below input for example\n\nIn R we would get the list(\"string 1\", \"string 2\") and not c(\"string 1\", \"string 2\").\n\n\n\n\n\n\nTip\n\n\n\nTo turn a list of scalars of the same type—e.g. double, integer, logical, or character—into a vector you can use unlist(). For example unlist(list(\"string 1\", \"string 2\")) will give us c(\"string 1\", \"string 2\")."
  },
  {
    "objectID": "geoprocessing-tools.html#common-patterns",
    "href": "geoprocessing-tools.html#common-patterns",
    "title": "R Geoprocessing tools",
    "section": "Common Patterns",
    "text": "Common Patterns\n\nReading a Feature Class\nOften we you will want to read a feature class using arcgisbinding and bring the results into R as an sf object. To do his we will use the functions arc.open(), arc.select(), and arc.data2sf().\ntool_exec &lt;- function(in_params, out_params) {\n\n  fclass &lt;- arcgisbinding::arc.open(in_params[[\"fc_path\"]])\n  \n  fclass_selected &lt;- arcgisbinding::arc.select(\n    fclass,\n    # fields = c(\"optional\", \"fields\", \"to\", \"read\"),\n    # where_clause = \"optional sql where clause to filter\"\n  )\n  \n  fclass_sf &lt;- arcgisbinding::arc.data2sf(fclass_selected)\n}\n\n\n\n\n\n\nNote\n\n\n\nIf you are going to filter or select columns from your dataset consider doing that with the fields and where_clause arguments of arc.select() to reduce the amount of data read into memory.\narc.select() returns a data.frame with fields and a special geometry column which is incompatible with sf. We use arc.data2sf() to convert it to an sf object.\n\n\n\n\nWriting a Feature Class\nIt is quite common to write the results of an analysis to a file geodatabase. This can be done with arc.write(). Typically, the we will capture the output path to write to in the out_params list object as a Feature Class type parameter.\narc.write() requires two arguments. The first is the output path to write to and the second is the object to write. The accepted type of objects are data.frame, sf, RasterLayer or RasterBrick.\n\n\n\n\n\n\nNote\n\n\n\nAs of Nov 2023 {terra} is not supported but we are actively working on this.\n\n\ntool_exec &lt;- function(in_params, out_params) {\n  \n  # extract the path to write to\n  out_fp &lt;- out_params[[\"output_fclass\"]]\n  \n  # write the `sf_object` to a geodatabase\n  arcgisbinding::arc.write(out_fp, sf_object)\n  \n}\n\n\nInstalling Required Packages\nWhen you share your R based GP tools with other users there is a good chance that they do not have the packages that your script tool needs to execute code. In this case, we should install the required packages the first time the script tool is executed.\nIn our script tool we should check to see if the required package is installed and if not, install it. We can write a helper function to include at the top of our script if we have multiple packages to check.\ninstall_if_not &lt;- function(pkg) {\n  if (!requireNamespace(pkg)) {\n    message(\"Installing required package `{\", pkg, \"}`\")\n    install.packages(pkg)\n  }\n}\nThis function uses requireNamespace() which attempts to load the provided package. If it succeeds, it returns TRUE, if not it returns FALSE. We check to see if it returns FALSE and if so, we install the package and print an informative message.\nFor example if we need to use the package {spdep} and its not installed it will print the message and install it.\ntool_exec &lt;- function(in_params, out_params) {\n  # check for required paackages \n  install_if_not(\"spdep\")\n  \n  # do other thigns with spdep\n  # ...\n}"
  },
  {
    "objectID": "geoprocessing-tools.html#using-progressors",
    "href": "geoprocessing-tools.html#using-progressors",
    "title": "R Geoprocessing tools",
    "section": "Using Progressors",
    "text": "Using Progressors\nGeoprocessing tools have a progressor, which includes both a progress label and a progress bar. The default progressor continuously moves back and forth to indicate the script is running. Using arc.progress_label() and arc.progress_pos() allows fine control over the script progress. Updating the progressor isn’t necessary, but is useful in situations where solely outputting messages to the dialog is insufficient to communicate script progress.\n\n\n\n\n\n\nDefault Progressor\n\n\n\n\n\n\n\nStep Progressor\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRead more in the Understanding the progressor in script tools article.\n\n\nUsing arc.progress_label() allows control over the label that is displayed at the top of the running script. For example, it might be used to display the current step of the analysis taking place. Using arc.progress_pos() allows control over the progressor position displayed at the top of the running script. The position is an integer percentage, 0 to 100, that the progress bar should be set to, with 100 indicating the script has completed (100%).\nlibrary(arcgisbinding)\n\ntool_exec &lt;- function(in_params, out_params) {\n  \n  # read feature class \n  arc.progress_label(\"Reading Feature Class\")\n  fclass &lt;- arc.open(in_params[[\"input_fclass\"]])\n  \n  # convert to sf\n  arc.progress_label(\"Converting Feature Class to sf\")\n  sf_obj &lt;- arc.data2sf(arc.select(fclass))\n  \n  # do other things \n  arc.progress_label(\"Doing other computations\")\n  \n  return(out_params)\n}"
  },
  {
    "objectID": "geoprocessing-tools.html#arcpy-integration",
    "href": "geoprocessing-tools.html#arcpy-integration",
    "title": "R Geoprocessing tools",
    "section": "Using R script tools with arcpy",
    "text": "Using R script tools with arcpy"
  },
  {
    "objectID": "geoprocessing-tools.html#dependent-parameters",
    "href": "geoprocessing-tools.html#dependent-parameters",
    "title": "R Geoprocessing tools",
    "section": "Dependent Parameters",
    "text": "Dependent Parameters\n\nAutopopulate field drop-down using dependent parameter"
  },
  {
    "objectID": "arcgisbinding/installing-arcgisbinding.html",
    "href": "arcgisbinding/installing-arcgisbinding.html",
    "title": "Installing {arcgisbinding}",
    "section": "",
    "text": "arcgisbinding is an R package that enables communication between ArcGIS Pro and R. In order to use it, you must have a installation of ArcGIS Pro with a valid licenses as well as a supported version of R."
  },
  {
    "objectID": "arcgisbinding/installing-arcgisbinding.html#from-pro",
    "href": "arcgisbinding/installing-arcgisbinding.html#from-pro",
    "title": "Installing {arcgisbinding}",
    "section": "Install within ArcGIS Pro (recommended)",
    "text": "Install within ArcGIS Pro (recommended)\nIf you are working in Pro 2.0 or beyond you have access to the built-in ArcGIS bridge installer which streamlines the process of installing arcgisbinding. It allows you to select your desired installation of R, and makes checking the bridge for updates easy. To install the bridge in this scenario, you will do the following:\n\nOpen ArcGIS Pro and click on the ‘Project’ tab in your project.\nSelect Options on the blue, left-hand side panel and in the pop-up window, under Application, select ‘Geoprocessing’.\nUnder the R-ArcGIS Support options, select your desired R home directory.\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nNote: All versions of R installed on your computer will appear in the drop-down menu. Make sure the version you select is R 3.2.2 or later. However, if you have installed R to a location other than the default, you might need to navigate to that location using the browse button.\n\n\n\n\nIf you have never installed the arcgisbinding, you will see a warning indicating that you need to install the package to enable R to connect with ArcGIS Pro. When you click on the icon next to the warning you will be presented with options to automatically download and install arcgisbinding, to separately download the package, or to install the package from file. Select the first option to \"automatically download and install\" the arcgisbinding package.\nA pop-up window will appear to inform you there is a new arcgisbinding version and will ask you if you wish to install it. Select \"Yes\".\nA progress bar will appear to inform you of the status of the installation before showing an Output Message to report the final status. If you scroll down, you should see that the package arcgisbinding was successfully installed."
  },
  {
    "objectID": "arcgisbinding/installing-arcgisbinding.html#install-from-r",
    "href": "arcgisbinding/installing-arcgisbinding.html#install-from-r",
    "title": "Installing {arcgisbinding}",
    "section": "Install from R",
    "text": "Install from R\nAlternatively, you can install the binding directly from R if you so wish! Open RStudio, VS Code, or your favorite text editor and run the following from the console.\n install.packages(\n  \"arcgisbinding\", \n  repos = \"https://r.esri.com\", \n  type = \"win.binary\"\n )\nThis will install the package binary directly from our GitHub repository which stores the builds of the package. Note that installing this way still has the same requirements. The package is a Windows binary and must be installed on a Windows computer."
  },
  {
    "objectID": "arcgisbinding/installing-arcgisbinding.html#offline-installation",
    "href": "arcgisbinding/installing-arcgisbinding.html#offline-installation",
    "title": "Installing {arcgisbinding}",
    "section": "Offline Installation",
    "text": "Offline Installation\nMany users of the R-ArcGIS Pro bridge (arcgisbinding) work in a completely air-gapped environment where downloading external packages from the internet is not possible.\nIn order to install arcgisbinding in an air-gapped environment you must first download the package on an internet enabled machine and “sneakernet” it into your offline environment.\nTo download the package go to https://r.esri.com/bin/ and choose the version of arcgisbridge that matches your version of R.\nOnce you’ve moved the zip file onto your air-gapped machine you can install it using the install.packages() command.\ninstall.packages(\"path/to/arcgisbinding_1.0.1.306.zip\", repos = NULL)"
  },
  {
    "objectID": "arcgisbinding/installing-arcgisbinding.html#upgrading-arcgisbinding",
    "href": "arcgisbinding/installing-arcgisbinding.html#upgrading-arcgisbinding",
    "title": "Installing {arcgisbinding}",
    "section": "Upgrading {arcgisbinding}",
    "text": "Upgrading {arcgisbinding}\n\nUsing ArcGIS Pro\nIf you have installed arcgisbinding from within ArcGIS Pro, follow the instructions for installing within ArcGIS Pro.\nIf you have previously installed arcgisbinding, you will see an installed message that lets you know the version of your arcgisbinding package and allows you to check for updates, download the latest version, or update from a file. Check for updates and ensure you have the latest version of the arcgisbinding package. If prompted to update, click \"Yes\" and the latest version will automatically be installed.\n\n\nUsing R or offline\nTo upgrade your package using R or in an offline environment, repeat the steps above."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R-ArcGIS Bridge",
    "section": "",
    "text": "The R-ArcGIS Bridge is a project designed to integrate the power of R with the greater ArcGIS ecosystem.\nThe R-ArcGIS Bridge has capabilities to integrate with ArcGIS Pro and Location Services."
  },
  {
    "objectID": "index.html#integrate-with-arcgis-pro-arcgisbinding",
    "href": "index.html#integrate-with-arcgis-pro-arcgisbinding",
    "title": "R-ArcGIS Bridge",
    "section": "Integrate with ArcGIS Pro {arcgisbinding}",
    "text": "Integrate with ArcGIS Pro {arcgisbinding}\n{arcgisbinding} the first package created under the R-ArcGIS Bridge is designed bridge the powers of R and ArcGIS.\nUsing {arcgisbinding} you can read and write local data sources and take advantage of ArcGIS Pro’s projection engine.\n\nRead and write local data sources with arc.write() and arc.open()\nConvert to {sf} and {raster} objects with arc.data2sf() and arc.raster()\n\n\nGeoprocessing Tools written in R\nThe true power of {arcgisbinding} lies in it’s ability to generate geoprocessing tools that execute R code.\nRead the documentation to get started building R-based geoprocessing tools!"
  },
  {
    "objectID": "index.html#interact-with-location-services",
    "href": "index.html#interact-with-location-services",
    "title": "R-ArcGIS Bridge",
    "section": "Interact with Location Services",
    "text": "Interact with Location Services\nThe {arcgis} metapackage provides access to Esri location services enabling users to read and write data from their hosted or on prem Portals.\nFollow along with the introduction tutorial to get started interacting with your organziation’s data directly from R!"
  },
  {
    "objectID": "index.html#our-r-packages",
    "href": "index.html#our-r-packages",
    "title": "R-ArcGIS Bridge",
    "section": "Our R-packages",
    "text": "Our R-packages\n\n\n\n{arcgisbinding}\nHarness the power of ArcGIS Pro from R.\n\n\n{arcgis}\nLocation services metapackage. Your one stop shop for all your location services needs!\n\n\n\n\n{arcgislayers}\nRead and write to Feature Services and much more with ArcGIS Location Services.\n\n\n{arcgisutils}\nPowers {arcgis} by providing functionality to authorize with your portal and convert to and from R objects and Esri JSON.\n\n\n\n\n{arcpbf}\nProcess FeatureCollection protocol buffers in R using the power of Rust!"
  },
  {
    "objectID": "index.html#not-sure-where-to-start",
    "href": "index.html#not-sure-where-to-start",
    "title": "R-ArcGIS Bridge",
    "section": "Not sure where to start?",
    "text": "Not sure where to start?\n\nRead and write Feature Services using {arcgis}\nCreate R based Geoprocessing tools\nAccess your enterprise geodatabase from R"
  }
]