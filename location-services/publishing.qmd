---
title: "Publishing from R"
subtitle: "Create Hosted ArcGIS Online or Enterprise Feature Services from R"
freeze: true
---

In addition to consuming data as an R user, you may also want to publish data as a hosted feature service. In this tutorial, you will learn how to publish an `sf` object <!-- or a `data.frame`--> to ArcGIS Online or Enterprise. 

## Authorization

In order to publish content to ArcGIS Online or Enterprise, you must first obtain an access token permitting you to do so. 

:::{.callout-caution}
If you have not yet set up your R environment for authorization, see [**Authorize with your Portal**](./connecting-to-a-portal.qmd). Ensure that the environment variables `ARCGIS_CLIENT` and `ARCGIS_USER` are set at minimum. If you are using ArcGIS Enterprise, ensure that `ARCGIS_HOST` is properly set as well.
:::

Go through the following code flow to set your credentials.

```{r, eval = FALSE}
library(arcgis)

token <- auth_code()  # <1>
set_arc_token(token) # <2>
#> Token set to environment variable `ARCGIS_TOKEN`
```
1. Create an access token
2. Set it to an environment variable.

Now that you have authorized to your Portal, you will be able to publish content. 

## Publishing {sf} objects

To publish an `{sf}` object to your portal, you can use the function `publish_layer()`. The publishing process requires you to add an item to your portal and publish it. The `publish_layer()` function handles these steps for you. 

First, read in the [North Carolina SIDS](https://cran.r-project.org/web/packages/spdep/vignettes/sids.html) dataset that comes packaged with `sf` and store it in an object called `nc`. 

```{r}
nc <- sf::read_sf(system.file("shape/nc.shp", package = "sf"))
nc
```

Now that you have an `sf` object and you have authorized with your portal, all that's left is to publish the item! 

`publish_layer()` has only two required arguments: 

- `x` the `sf` object or `data.frame`
- `title` the title of layer you are creating

```{r, eval=FALSE}
res <- publish_layer(nc, "North Carolina SIDS")
res
#> $services
#>              type
#> 1 Feature Service
#>                                                                                             serviceurl
#> 1 https://services1.arcgis.com/hLJbHVT9ZrDIzK0I/arcgis/rest/services/North Carolina SIDS/FeatureServer
#>     size                                jobId                    serviceItemId
#> 1 125766 f14451a7-325b-40b0-85c3-534bcf122806 32511ce0413f40d08303e267a7093be0
#>                                                                                          encodedServiceURL
#> 1 https://services1.arcgis.com/hLJbHVT9ZrDIzK0I/arcgis/rest/services/North%20Carolina%20SIDS/FeatureServer
```

:::{.callout-warning}
If you encounter errors while publishing, try using a feature layer title that does not contain spaces or special characters, such as "NorthCarolinaSIDS" for this example.
:::

Now from your Portal's [Content page](https://arcgis.com/home/content.html) you should see two items associated with your feature service:

![](images/publish/published-items.png){width=70%}

Behind the scenes, `publish_layer()` added the `sf` object as a *Feature Layer* item first and then published this item as a *Feature Layer (hosted)*. After publishing, you will typically only interact with the hosted feature layer. (Note that the dependency between these two items prevents you from deleting the underlying feature layer while the hosted feature layer still exists.)

:::{.aside}
Learn about [hosted feature layers](https://doc.arcgis.com/en/arcgis-online/reference/feature-layers.htm#ESRI_SECTION1_26EBAE21F63042B9A51A4312A08A1B25)
:::

Click **View details** on the hosted feature layer item and you should see something like the below:

![](images/publish/nc-sids.png){width=70%}

## Reading the published Feature Layer

The output of the `publish_layer()` function is a list that contains information about where the `sf` object was published.
You can retrieve the `encodedServiceUrl` from the response and use `arc_open()` to return the metadata for your newly-created service. 

```{r eval=FALSE}
nc_fserver <- arc_open(res[[c("services", "encodedServiceURL")]])
nc_fserver
#> <FeatureServer <1 layer, 0 tables>>
#> CRS: 4267
#> Capabilities: Create,Delete,Query,Update,Editing
#>   0: North Carolina SIDS (esriGeometryPolygon)
```

You'll notice that this is a `FeatureServer`. All items that are published to a Portal become their own Feature Server with a single `FeatureLayer`.

You can extract a single layer from the `FeatureServer` using `get_layer()`. Provide the `FeatureServer` as the first argument and then the ID of the layer you want as the second argument. 

```{r eval=FALSE}
get_layer(nc_fserver, 0)
#> <FeatureLayer>
#> Name: North Carolina SIDS
#> Geometry Type: esriGeometryPolygon
#> CRS: 4267
#> Capabilities: Create,Delete,Query,Update,Editing
```



## Publishing `data.frame`s 

Publishing a `data.frame` follows the same steps as those above. The difference is that it creates a `Table` object. Try repeating the same process but using the palmerpenguins dataset! 

```{r eval=FALSE}
# install.packages("palmerpenguins")
palmerpenguins::penguins
```

:::{.callout-tip title="Solution" collapse="true"}
```{r eval=FALSE}
publish_layer(palmerpenguins::penguins, "Palmer Penguins")
```

:::
