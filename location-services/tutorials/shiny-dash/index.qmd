---
title: "Dashboard using ArcGIS Hosted Data"
subtitle: "Building an interactive dashboard with {arcgis}"
freeze: true
resources: 
  - html/*
---

In this tutorial we will be recreating a dashboard that utilizes the data from the [City of Chattanooga Open Data Hub](https://www.chattadata.org/Public-Safety/Pedestrian-Accidents/8piy-9u9f). In the below LinkedIn post by [Charlie Mix](https://www.linkedin.com/in/charlie-mix/), they use this data to create an ArcGIS Dashboard. 

<iframe src="https://www.linkedin.com/embed/feed/update/urn:li:share:7135693622615691264" height="500" width="504" frameborder="0" allowfullscreen="" title="Embedded post"></iframe>

[Original LinkedIn Post](https://www.linkedin.com/posts/charlie-mix_arcgisdashboard-gis-activity-7135693623307767808-sbRW?utm_source=share&utm_medium=member_desktop)

The data is provided as a [Feature Service](https://services.arcgis.com/UnTXoPXBYERF0OH6/arcgis/rest/services/Vehicle_Pedestrian_Incidents/FeatureServer) by Charlie Mix, which we will use to create a lightweight interactive dashboard in R using `{arcgis}` and `{bslib}`.

The dashboard that we are going to create can be [viewed live here](https://r.esri.com/traffic-incidents-dashboard/index.html).

## The Packages


There are 4 components to this dashboard that we will want to recreate. These are the two plots, the statistics, and the map. 


We're going to use 9 packages to make this happen.
```{r}
# knitr::opts_chunk$set(eval = FALSE)
```


```{r, message = FALSE}
library(sf)
library(bslib)
library(dplyr)
library(arcgis)
library(plotly)
library(bsicons)
library(ggplot2)
library(leaflet)

theme_set(theme_minimal())
```


## Reading data from ArcGIS Online

```{r}
# open the feature server
crash_server <- arc_open("https://services.arcgis.com/UnTXoPXBYERF0OH6/arcgis/rest/services/Vehicle_Pedestrian_Incidents/FeatureServer")

crash_server

# fetch individual layers
(incidents <- get_layer(crash_server, 1))
(hotspots <- get_layer(crash_server, 2))


# bring them into memory as sf objects
inci_sf <- arc_select(incidents)
hs_sf <- arc_select(hotspots)
```

:::{.panel-tabset}

### Hot Spot Analysis

```{r}
glimpse(hs_sf)
```

### Incidents

```{r}
glimpse(inci_sf)
```

:::

## Creating the plots

- use a combination of ggplot2 and plotly
- ggplot2 creates the static plot
- plotly makes it interactive


```{r}
#| layout-ncol: 2
annual_counts <- inci_sf |>
  st_drop_geometry() |>
  mutate(year = lubridate::year(Incident_Date)) |>
  group_by(year) |>
  count() |>
  ungroup()

gg_annual <- ggplot(annual_counts, aes(year, n)) +
  geom_line() +
  geom_point(size = 3) +
  labs(
    x = "Year",
    y = "Incidents"
  )

speed_counts <- inci_sf |>
  st_drop_geometry() |>
  count(Posted_Speed) |>
  filter(!is.na(Posted_Speed))

gg_speed <- ggplot(speed_counts, aes(Posted_Speed, n)) +
  geom_col() +
  labs(
    x = "Posted Speed Limit (miles per hour)",
    y = "Incidents"
  )

gg_annual
gg_speed
```

Make them interactive with plotly

```{r}
#| layout-ncol: 2
ggplotly(gg_annual)
ggplotly(gg_speed)
```


We will add these plotly widget directly into our dashboard as a tabset

```{r}
plot_tab <- navset_card_tab(
  title = "Plots",
  nav_panel(
    "By year",
    card_title("Vehicle-Pedestrian Incidents by Year"),
    ggplotly(gg_annual)
  ),
  nav_panel(
    "By speed",
    card_title("Vehicle Pedestrian Incidents by Posted Speed Limit"),
    ggplotly(gg_speed)
  )
)

plot_tab
```


## Statistic value boxes

We want to calculate the statistics and present them in a value box. These are fairly simple statistics that we can calculate from the

:::{.panel-tabset}

### Base R

```{r}
n_incidents <- nrow(inci_sf)

n_medical_transit <- table(inci_sf$Involved_Medical_Transport)["Yes"]

n_fatalities <- table(inci_sf$Involved_Fatal_Injury)[["Yes"]]

n_alc_drug <- sum(
  inci_sf$Drug_Involved == "Yes" | inci_sf$Alcohol_Involved == "Yes", 
  na.rm = TRUE
)
```

### dplyr

```{r}
n_incidents <- count(inci_sf) |> 
  pull(n)

n_medical_transit <- inci_sf |> 
  count(Involved_Medical_Transport) |> 
  filter(Involved_Medical_Transport == "Yes") |> 
  pull(n)

n_fatalities <- inci_sf |> 
  count(Involved_Fatal_Injury) |> 
  filter(Involved_Fatal_Injury == "Yes") |> 
  pull(n)

n_alc_drug <- inci_sf |> 
  filter(Drug_Involved == "Yes" | Alcohol_Involved == "Yes") |> 
  count() |> 
  pull(n)
```

:::


We can pass these into `bslib::value_box()` to create nice looking cards. 

```{r}
value_box("Number of Incidents", n_incidents)
```
The `showcase` argument lets us add text or images that are emphasized in the value box. Let's use bootstrap icons to add a bit of pizazz. 

```{r}
value_box(
    "Number of Incidents",
    n_incidents,
    showcase = bs_icon("person")
)
```
Let's create a card for each of these statistics and store them in their own variable. 

```{r}
inci_card <- value_box(
  "Number of Incidents",
  n_incidents,
  showcase = bs_icon("person")
)

fatalities_card <- value_box(
  "Total Fatalities",
  n_fatalities,
  showcase = bs_icon("heartbreak")
)

medical_card <- value_box(
  "Involved Medical Transport",
  n_medical_transit,
  showcase = bs_icon("heart-pulse")
)

drugs_card <- value_box(
  "Involved Drugs or Alcohol",
  n_alc_drug,
  showcase = bs_icon("capsule")
)
```

Let's build out a component of our dashboard using these cards. We'll create a grid of these 4 using `layout_columns`. This will arrange bslib components into columns for us. 

```{r}
layout_columns(
  inci_card, 
  fatalities_card,
  medical_card, 
  drugs_card
)
```
By default this will put each item in their own column. But we can specify the width of each element in grid units. In web development, user interfaces are often partitioned into grid units that are broken into twelve units. So if we want two value cards per row, we need to specify the column widths to be 6.

```{r}
stats <- layout_columns(
  inci_card, 
  fatalities_card,
  medical_card, 
  drugs_card,
  col_widths = 6
)

stats
```

## Creating the map

```{r}
hexes <- hs_sf |>
  transmute(
    classification = case_when(
      Gi_Bin == 0 ~ "Not Significant",
      Gi_Bin == 1 ~ "Hot Spot with 90% Confidence",
      Gi_Bin == 2 ~ "Hot Spot with 95% Confidence",
      Gi_Bin == 3 ~ "Hot Spot with 99% Confidence"
    )
  ) |>
  st_transform(4326)

# create labels vector to pass to leaflet
gi_labels <- c(
  "Not Significant",
  "Hot Spot with 90% Confidence",
  "Hot Spot with 95% Confidence",
  "Hot Spot with 99% Confidence"
)

pal <- colorFactor(
  palette = c("#c6c6c3", "#c8976e", "#be6448", "#af3129"),
  levels = gi_labels
)

map <- leaflet() |>
  addProviderTiles("Esri.WorldGrayCanvas") |>
  addPolygons(
    data = hexes,
    fillColor = ~pal(classification),
    color = "#c6c6c3",
    weight = 1,
    fillOpacity = 0.8
  ) |>
  addLegend(
    pal = pal,
    values = gi_labels,
    opacity = 1,
    title = "Hot Spot Classification"
  ) |>
  setView(-85.3, 35.04, 12.5)

map
```
Let's put this map in a `bslib::card()` component with a proper title as well. We'll ad a title to the card with `bslib::card_header()`.

```{r}
map_card <- card(
  card_header("Vehicle-Pedestrian Incidents for Chattanooga, TN (2018-2023)"),
  map
)

map_card
```


## Putting the UI together

Create an empty page with `bslib::page_fillable()`. We can add all of our elements directly to this page.

```{r}
page_fillable(
  theme = theme_bootswatch("darkly"),
  map_card, stats, plot_tab
)
```
But they are all squished together and it isnt much of a dashboard. We can use the `bslib::layout_columns()` function to begin to arrange this a bit more. Let's first get our right hand side of the dashboard arranged into its own layout so that the statistics sit above the plots. 
We'll set the `col_widths = 12` so that each component takes the full width. 

```{r}
rhs_col <- layout_columns(
  stats,
  plot_tab,
  col_widths = 12
)

rhs_col
```
Now that we have the right hand side sorted out, let's create another `layout_columns()` where the map takes up 2/3 of the screen and the right hand column takes up the rest of the space. 

```{r}
dash_content <- layout_columns(
  map_card,
  rhs_col,
  col_widths = c(8, 4)
)

dash_content
```

Now we can put this in our `page_filable()`

```{r}
page_fillable(dash_content)
```

