---
title: "Overwrite Hosted Feature Layer"
subtitle: "Using the truncate and append workflow"
--- 

```{r include = FALSE}
knitr::opts_chunk$set(eval = FALSE)
```

From time to time as the owner of a Feature Layer, you may need to completely overwrite the data in the service. Overwriting a web layer from ArcGIS Pro may lead to a loss of associated pop-ups and symbology. One way to get around this is to truncate the feature service and append new data to the same service. 

For this example, we need to be the owner of a Feature Service. As such, we will use the North Carolina SIDS dataset we created in the [**Publishing from R**](../publishing.qmd) tutorial. If you have not done that tutorial, complete it first.  

## Truncating a Feature Layer

Truncating a Feature Layer deletes every single record in the service and resets the auto-increment of the object ID. Truncating a service does not change the field definitions or permit us to add or remove fields to it. If you wish to do so, publish a new layer instead. 

Before we can modify a service, we must first authorize ourselves with the portal. To do so we will use the `auth_code()` authorization flow. If you have not yet configured you environment to authorize with your portal, follow the [**Connecting to your Portal**](../connecting-to-a-portal.qmd) tutorial. 

First load `arcgis`.

```{r, eval = FALSE}
library(arcgis)
```
```
#> Attaching core arcgis packages:
#>   - {arcgisutils} v0.1.0
#>   - {arcgislayers} v0.1.0
```

Next, authorize with the service itself and set the access token.

```{r eval = FALSE}
token <- auth_code()
set_auth_token(token)
```
```
#> Token set to environment variable `ARCGIS_TOKEN`
```

Now that we have verified our identity with our portal we can create a `FeatureLayer` object from our hosted service. From your [content listing](https://arcgis.com/home/content.html) find the Feature Layer url. 

:::{.callout-tip}
Revisit the "Obtaining a feature layer url" section of the [**Read hosted data**](../read-data.qmd#obtaining-a-feature-layer-url) tutorial if you forgot how to retrieve the service url.
:::

```{r}
furl <- "https://services1.arcgis.com/hLJbHVT9ZrDIzK0I/arcgis/rest/services/North%20Carolina%20SIDS/FeatureServer/0" # <1>

nc <- arc_open(furl) # <2>
nc
```
```
#> <FeatureLayer <100 features, 15 fields>>
#> Name: North Carolina SIDS
#> Geometry Type: esriGeometryPolygon
#> CRS: 4267
#> Capabilities: Create,Delete,Query,Update,Editing
```

:::{.aside}
This is the url of your hosted feature service. This will be different than what is here. Note that the `/0` indicates the layer index. You can often copy the url from under the URL section on the right hand menu and append the `/0` to it. 
:::


Before we can truncate the `FeatureLayer`, we should check to see that the layer itself supports this operation. The `supportsTruncate` attribute will return `TRUE` if we can truncate it. If not, we're out of luck and need to create an entirely new service! 

```{r}
nc[["supportsTruncate"]]
```

Since we know that we can truncate the service, we can go ahead and do so. 

```{r}
truncate_res <- truncate_layer(nc)
truncate_res
```
We store the result into `truncate_res` to see the results. Let's now go ahead and refresh our layer and check to see if the changes have taken place. 

```{r}
nc <- refresh_layer(nc)
nc
```
```
#> <FeatureLayer <0 features, 15 fields>>
#> Name: North Carolina SIDS
#> Geometry Type: esriGeometryPolygon
#> Capabilities: Create,Delete,Query,Update,Editing
```

After refreshing the layer we can see that there are now 0 features! Success! There are still 15 fields and we still have the same name and geometry type. 

## Adding features

Now that we have deleted all of the features of the layer, lets go ahead and add some new ones. Let's read the `nc.shp` file from sf into memory, give it a slight modification, and add those features to our service. 

```{r, eval = TRUE}
library(sf)

nc_sf <- read_sf(system.file("shape/nc.shp", package = "sf"))
nc_sf
```

Rather than publish the polygons as they are, let's calculate the convex hull of each shape and publish those. 

```{r}
nc_convex <- st_convex_hull(nc_sf)
plot(st_geometry(nc_convex))
```

Let's take this sf object and add them as features to our now empty `FeatureLayer`. To add features we use the `add_features()` function. The first argument is the `FeatureLayer` (or `Table`) that we are adding features to. The second is the sf object that we will be adding to the layer.

:::{.callout-tip}
It is important to note that the column names of the sf object must match the names of the fields in the `FeatureLayer` otherwise `arcgis` does not know which column matches which field. 
:::

```{r}
add_res <- add_features(nc, nc_convex)
#> Warning: CRS missing from `x` cannot verify matching CRS.
```

We receive a warning because there is no spatial reference in the hosted `FeatureLayer` after truncating. Print the `add_res` object to see if each feature was successfully added.

```{r}
head(add_res)
```
```
#>     objectId uniqueId globalId success
#> 1          1        1       NA    TRUE
#> 2          2        2       NA    TRUE
#> 3          3        3       NA    TRUE
#> 4          4        4       NA    TRUE
#> 5          5        5       NA    TRUE
#> 6          6        6       NA    TRUE
```

Now that we have added our features, let us refresh the layer again.

```{r}
nc <- refresh_layer(nc)
```
```
#> <FeatureLayer <100 features, 15 fields>>
#> Name: North Carolina SIDS
#> Geometry Type: esriGeometryPolygon
#> CRS: 4267
#> Capabilities: Create,Delete,Query,Update,Editing
```

If you view the hosted Feature Layer in the map viewer, you should now see the convex hulls.

![](images/nc-convex-hulls.png)


