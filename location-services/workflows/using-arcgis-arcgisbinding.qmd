---
title: "Using `arcgis` with `arcgisbinding`"
subtitle: "Combining the two packages for workflows that span ArcGIS Pro and ArcGIS location services"
freeze: true
--- 

<!-- ```{r include = FALSE}
knitr::opts_chunk$set(eval = FALSE)
``` -->

While both are components of the R-ArcGIS Bridge, `arcgis` and `arcgisbinding` serve distinct purposes: 

- `arcgis` *bridges* to ArcGIS location services, enabling web-based workflows from R
- `arcgisbinding` *binds* to ArcGIS Pro, enabling data i/o and other desktop software-based processes from R

However, there may be instances where you want to combine the functionality of these two R packages in a single workflow. The below code samples demonstrate how these packages can be used together, as well as alongside popular spatial R packages like `terra` and `sf`.

## Extract imagery of the Ouarkziz crater

This sample shows how to extract and resample multispectral Landsat imagery from ArcGIS Living Atlas using `arcgis` and `arcgisbinding`. Both packages also work with `terra`, so you can easily plot, write, and integrate with other R-based raster analysis workflows.


```{r message = FALSE}
# install.packages('arcgis')

library(terra)
library(raster)
library(arcgis)
library(arcgisbinding)
arc.check_product()

# ArcGIS Living Atlas Landsat2 imagery service URL 
rurl <- "https://landsat2.arcgis.com/arcgis/rest/services/Landsat/MS/ImageServer"

# use arcgis to extract the natural color imagery
img_srv <- arc_open(rurl)
img_srv
```

```{r}
img <- arc_raster(
  img_srv,
  "-846028", # xmin
  "-833783", # xmax
  "3373101", # ymin
  "3380738", # ymax
)
img
```

```{r}
# use terra to view the imagery
plotRGB(img, stretch = "lin")
```

```{r}
# use arcgisbinding to resample and view SWIR
bbox <- c(-846028, # xmin
          3373101, # ymin
          -833783, # xmax
          3380738) # ymax
resampled <- arc.raster(arc.open(rurl), bands=1, nrow=300, ncol=300, resample_type="CubicConvolution", extent=bbox)
rrast <- as.raster(resampled)
plot(rrast)
```

```{r}
# use terra to write out the natural color & SWIR rasters
writeRaster(img, "ouarkziz-crater-RGB.tif", overwrite=TRUE)
writeRaster(rrast, "ouarkziz-crater-SWIR.tif", overwrite=TRUE)
```

Data Source: [Multispectral Landsat](https://www.arcgis.com/home/item.html?id=d9b466d6a9e647ce8d1dd5fe12eb434b) 

[Learn more about the Ouarkziz crater in Algeria.](https://earthobservatory.nasa.gov/images/77851/ouarkziz-impact-crater-algeria)


## Use local data to update an ArcGIS Online feature service

Imagine that you are in charge of maintaining a feature service for your organization that needs to be updated on a regular basis. To avoid dealing with tedious and error-prone manual updates, you can use a scheduled R script to make these updates automatically.

In this example, the user maintains an ArcGIS Online feature service containing data representing fatal car accidents in Missouri. Periodically, the user receives data updates in a file geodatabase. The workflow below uses `arcgisbinding` to read the feature class into R and convert it to an `sf` object. Then, `arcgis` uses the `sf` object to add the new features to the feature service.

```{r message = FALSE}
library(sf)
library(arcgis)
library(arcgisbinding)
arc.check_product()
```

```{r}
# use arcgisbinding to read in feature class
fcpath = "C:\\Data\\FARS_update.gdb\\FARS_2021"
fc <- arc.open(fcpath)
fc
```

```{r}
# use arcgisbinding to filter data to Missouri and convert to sf
sqlquery <- "STATENAME = 'Missouri'"
fcdata <- arc.select(fc, where_clause=sqlquery)
sfdata <- arc.data2sf(fcdata) # project to 3857

# use arcgis to set token
token <- auth_binding()
set_arc_token(token)
```
In this case, the token is set using the active portal in ArcGIS Pro (via `{arcgisbinding}`). Note that other [authorization methods](../connecting-to-a-portal.qmd) could be used here, such as `auth_code()` or `auth_user()`.
```{r eval}
# use arcgis to access feature service
fsurl <- "https://services1.arcgis.com/hLJbHVT9ZrDIzK0I/arcgis/rest/services/Fatal_Vehicle_Accidents_in_Missouri/FeatureServer/0"
flyr <- arc_open(fsurl)
flyr
```
Access to this feature service is restricted (i.e., it is not shared to "Everyone" in ArcGIS Online). Because the user that requested the token *does* have access to read and modify this feature service, they are able to access the feature service and its metadata, as well as make changes to the data. Learn more about how access to items is managed in ArcGIS Online [here](https://doc.arcgis.com/en/arcgis-online/share-maps/share-items.htm).
```{r message = FALSE}
# use sf to project new data to the same crs as flyr
sfdataprj <- st_transform(sfdata, st_crs(flyr))

# use arcgis to add the new features
add_res <- add_features(flyr, sfdataprj)
tail(add_res)
```
The result of the `add_features()` function provides fine-grained information about the success (or failure) of the feature additions. Here, all 931 new features were successfully added to the feature service. If you were running this process as an automated script, you may want to capture and log any features that failed.
