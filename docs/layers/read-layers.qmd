---
title: "Reading Feature Services"
uid: reading-feature-services
freeze: true
---
ArcGIS Online and Enterprise web services can easily be read into R using`{arcgislayers}`. Supported service types include:

 - [FeatureServer](https://developers.arcgis.com/rest/services-reference/enterprise/feature-service.htm)
    - [FeatureLayer](https://developers.arcgis.com/rest/services-reference/enterprise/feature-layer.htm)
    - [Table](https://developers.arcgis.com/rest/services-reference/enterprise/feature-layer.htm)
 - [MapServer](https://developers.arcgis.com/rest/services-reference/enterprise/map-service.htm)
    - [GroupLayer](https://developers.arcgis.com/web-map-specification/objects/groupLayer/)
 - [ImageServer](https://developers.arcgis.com/rest/services-reference/enterprise/image-service.htm)


Metadata for all of the above service types can be accessed using `arc_open()`. Feature data can be read in using `arc_select()` for FeatureLayer, Table, and ImageServer.

This tutorial will teach you the basics of reading data from hosted Feature Layers into R as [`{sf}`](https://r-spatial.github.io/sf/) objects using`{arcgislayers}`. 

## Objective

The objective of this tutorial is to teach you how to:

- find a Feature Layer url from ArcGIS Online
- read in the data from the Feature Layer
- select the Feature Layer data by column
- filter the Feature Layer data by attributes

## Obtaining a feature layer url

For this example, you will read in population data of major US cities from ArcGIS Online. 

You will use the functions `arc_open()` and `arc_select()` to read data from ArcGIS Online into R. However, these functions require the url of the hosted feature service. To find this, navigate to the [item](https://www.arcgis.com/home/item.html?id=9df5e769bfe8412b8de36a2e618c7672) in ArcGIS Online. 


![](../shared/images/usa-cities.png)
When you scroll down, on the right hand side, you will see a button to view the service itself. 

![](../shared/images/view-url.png){width=45%}

Clicking this will bring you to the Feature Service. Inside of a Feature Server there may be many layers or tables that you can use. In this case, there is only one layer. Click the hyperlinked **USA Major Cities**. 

![](../shared/images/usa-cities-server.png)

This reveals the Feature Layer of interest. 

![](../shared/images/usa-cities-layer.png){width=70%}

Navigate to your browser's search bar and copy the url.

```
https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Major_Cities_/FeatureServer/0
```

## Opening a Feature Layer

Before you can read in the Feature Layer, you need to load the `arcgis` R package. If you do not have `arcgis` installed, install it with `pak::pak("r-arcgis/arcgis")` or `install.packages("arcgis")`.

:::{.aside}
`{pak}` is an R package that makes it faster and easier to install R packages. If you do not have it installed, run `install.packages("pak")` first. 
:::

```{r}
library(arcgis)
```

Use the below code to store the Feature Layer url in an object called `furl` (as in feature layer url).

```{r}
furl <- "https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Major_Cities_/FeatureServer/0"
```

Then pass this variable to `arc_open()` and save it to `flayer` (feature layer).

```{r}
flayer <- arc_open(furl)
flayer
```

`arc_open()` will create a `FeatureLayer` object. Under the hood, this is really just a list containing the feature layer's metadata. 

:::{.callout-note collapse="true" title="FeatureLayer details for the curious"}
The `FeatureLayer` object is obtained by adding `?f=json` to the feature layer url and processing the json. All of the metadata is stored in the `FeatureLayer` object. You can see this by running `unclass(flayer)`. Be warned! It gets messy. 
:::

With this `FeatureLayer` object, you can read data from the service into R! 

## Reading from a Feature Layer

Once you have a `FeatureLayer` object, you can read its data into memory using the `arc_select()` function. By default, if you use `arc_select()` on a `FeatureLayer` without any additional arguments, the entire service will be brought into memory.

:::{.callout-warning}
Avoid reading in more data than you need! Reading an entire feature service is fine for datasets with fewer than 5,000 features. But when there are more than 10,000 features, performance and memory may be throttled. 

Exceptionally detailed geometries require more data to be transferred across the web and may be slower to process and may require adjustment of the `page_size` argument of `arc_select()`.
:::

Store the results of `arc_select()` in the object `cities`. 

```{r, message = FALSE}
cities <- arc_select(flayer)
cities
```

The result is an `sf` object that you can now work with using **`sf`** and any other R packages. 

### Specifying output fields 

In some cases, you may have Feature Layers with many extraneous fields. You can specify which fields to return to R using the `fields` argument. 

:::{.callout-tip}
Remember to only read in the data that you need. Adding unneeded fields uses more memory and takes longer to process. 
:::

`fields` takes a character vector of field names. To see which fields are available in a Feature Layer, you can use the utility function `list_fields()`.

```{r}
fields <- list_fields(flayer)
fields[, 1:4]
```
:::{.aside}
For the sake of readability, only the first 4 columns are displayed.
:::

Let's try reading in only the `"STATE_ABBR"`, `"POPULATION"`, and `"NAME"` fields. 

```{r}
arc_select(
  flayer, 
  fields = c("STATE_ABBR", "POPULATION", "NAME")
)
```

### Using SQL where clauses

Not only can you limit the number of columns returned from a Feature Layer, but you can also limit the number of rows returned. This is very handy in the case of Feature Layers with hundreds of thousands of features. Reading all of those features into memory would be slow, costly (in terms of memory), and, in many cases, unnecessary!

The `where` argument of `arc_select()` permits you to provide a very simple SQL where clause to limit the features returned. Let's explore the use of the `where` argument. 

Let's modify the above `arc_select()` statement to return only the features in California, using the where clause `STATE_ABBR = 'CA'`

```{r}
arc_select(
  flayer,
  where = "STATE_ABBR = 'CA'",
  fields = c("STATE_ABBR", "POPULATION", "NAME")
)
```

You can also consider finding only the places in the US with more than 1,000,000 people.

```{r}
arc_select(
  flayer,
  where = "POPULATION > 1000000",
  fields = c("STATE_ABBR", "POPULATION", "NAME")
)
```

Now try combining both where clauses using `and` to find only the cities in California with a population greater than 1,000,000.

```{r}
arc_select(
  flayer,
  where = "POPULATION > 1000000 and STATE_ABBR = 'CA'",
  fields = c("STATE_ABBR", "POPULATION", "NAME")
)
```

## Map and Feature Servers

This example has only illustrated how to work with `FeatureLayer` objects. However, often times you may wish to work with a collection of layers in a `FeatureServer`, `MapServer`, or `GroupLayer`. All of these are collections of multiple layers. Like a `FeatureLayer`, these are accessed with `arc_open()`.

```{r}
furl <- "https://services3.arcgis.com/ZvidGQkLaDJxRSJ2/arcgis/rest/services/PLACES_LocalData_for_BetterHealth/FeatureServer"

fsrv <- arc_open(furl)
fsrv
```

This `FeatureServer` contains 5 layers. The individual layers can be fetched using `get_layer()` which lets us specify the layer by ID or by name. It is recommended to use the ID as that will be less prone to human error (for example a space is secretly a tab). The result of the function is a `FeatureLayer` object that can be used with `arc_select()` as illustrated above.

```{r}
get_layer(fsrv, id = 2)
```

Some `FeatureServer`s will also contain tables.

```{r}
furl <- "https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/USA_Wetlands/FeatureServer"
fsrv2 <- arc_open(furl)
fsrv2
```

This can be fetched using `get_layer()` as well.

```{r}
get_layer(fsrv2, 1)
```


If you would like to fetch multiple items at one time there is a plural `get_layers()` which will fetch multiple items based on name or id and return a list.

```{r}
get_layers(fsrv, id = c(0, 2, 4))
```

There is also a helper `get_all_layers()` to fetch all of layers of a `FeatureServer`, `MapServer`, or `GroupLayer` into a list. The list has two elements `layers` and `tables`. The former containing all of the `FeatureLayer`s and the latter containing all of the `Table`s in the `FeatureServer`.

```{r}
get_all_layers(fsrv2)
```

